#
#  Copyright
#

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

INCLUDE(cmake/base.cmake)
INCLUDE(cmake/cpack.cmake)

SET(PROJECT_NAME bci-interface)
SET(PROJECT_CONTACT )
SET(PROJECT_DESCRIPTION "")
SET(PROJECT_URL "")
SET(PROJECT_VERSION 1.0)

SET(CXX_DISABLE_WERROR True)
SET(CUSTOM_HEADER_DIR bci-interface)

IF(NOT WIN32)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
ENDIF(NOT WIN32)

#SET(PROJECT_VERSION 0.1)

#
#  Specific CmakeModules
#
SETUP_PROJECT(FALSE)

#
#  Look for dependencies
#

INCLUDE_DIRECTORIES(${CMAKE_INSTALL_PREFIX}/include)

find_package( Boost 1.40.0 COMPONENTS thread system filesystem)

IF(Boost_FOUND)
    MESSAGE(STATUS "Found Boost")
    MESSAGE(STATUS "Boost_INCLUDE_DIRS ${Boost_INCLUDE_DIRS}")
	INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
	LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
ENDIF(Boost_FOUND)

# FIXME Set to appropriate directory if having trouble to find OVRSDK, second entry is for travis
FIND_PATH(OCULUS_SDK_DIR "LibOVR/Include/OVR.h" PATHS ${CMAKE_SOURCE_DIR}/../OculusSDK ${CMAKE_BINARY_DIR}/jherico/OculusSDK ${CMAKE_SOURCE_DIR}/../jherico/OculusSDK ${CMAKE_SOURCE_DIR}/../../jherico/OculusSDK)
MESSAGE("Found Oculus SDK at ${OCULUS_SDK_DIR}")
# FIXME

IF(WIN32)
    SET(USE_JHERICO_SDK 0)
ELSE(WIN32)
    SET(USE_JHERICO_SDK 1)
ENDIF(WIN32)

INCLUDE_DIRECTORIES(${OCULUS_SDK_DIR}/LibOVR/Include)
IF(USE_JHERICO_SDK EQUAL 1)
    LINK_DIRECTORIES(${OCULUS_SDK_DIR}/LibOVR/)
    LINK_DIRECTORIES(${OCULUS_SDK_DIR}/3rdParty/EDID)
    SET(OCULUS_LIB OculusVR edid)
ELSE()
    IF(NOT WIN32)
        LINK_DIRECTORIES(${OCULUS_SDK_DIR}/LibOVR/Lib/Linux/Release/i386)
        LINK_DIRECTORIES(${OCULUS_SDK_DIR}/LibOVR/Lib/Linux/Release/x86_64)
        SET(OCULUS_LIB ovr)
    ELSE(NOT WIN32)
        LINK_DIRECTORIES(${OCULUS_SDK_DIR}/LibOVR/Lib/Win32/)
        SET(OCULUS_LIB libovr.lib)
    ENDIF(NOT WIN32)
ENDIF()
MESSAGE("Oculus library location ${OCULUS_SDK_DIR}/LibOVR/Lib/Win32/")
MESSAGE("Found OVR library ${OCULUS_LIB}")

SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules)

find_package(Eigen3)
INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIR})

find_package(SFML COMPONENTS oculus graphics window system)

INCLUDE_DIRECTORIES(${SFML_INCLUDE_DIR})

IF(WIN32)
ADD_DEFINITIONS(-DSFML_STATIC -DGLEW_STATIC)
ENDIF(WIN32)

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(include)
ADD_SUBDIRECTORY(test)
ADD_SUBDIRECTORY(application)

# Add dependency towards the library in the pkg-config file.
PKG_CONFIG_APPEND_LIBS("bci-interface")

PKG_CONFIG_APPEND_CFLAGS("-I${SFML_INCLUDE_DIR}")
PKG_CONFIG_APPEND_LIBS_RAW("${SFML_LIBRARIES}")

SETUP_PROJECT_FINALIZE()
SETUP_PROJECT_CPACK()
