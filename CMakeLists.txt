#
#  Copyright
#

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET(PROJECT_NAME bci-interface)
project(${PROJECT_NAME})

SET(PROJECT_VERSION 0.1)

SET(CMAKE_VERBOSE_MAKEFILE true)

IF(WIN32)
  SET(LIBDIR_KW "/LIBPATH:")
  SET(LIBINCL_KW "")
  SET(LIB_EXT ".lib")
ENDIF(WIN32)

IF(UNIX)
  SET(LIBDIR_KW "-L")
  SET(LIBINCL_KW "-l")
  SET(LIB_EXT "")
ENDIF(UNIX)

#
#  Specific CmakeModules
#
SET(CMAKE_MODULE_PATH ${${PROJECT_NAME}_SOURCE_DIR}/CMakeModules)

#
#  Look for dependencies
#

# Load Pkgconfig macros
INCLUDE(FindPkgConfig)
SET(PACKAGE_REQUIREMENTS "")

#
#  Dependecy to OMNIORB4
#
INCLUDE(${CMAKE_MODULE_PATH}/UseOmniORB4.cmake)

MESSAGE(STATUS "omniORB4_cflags: ${omniORB4_cflags}")
MESSAGE(STATUS "omniORB4_link_flags: ${omniORB4_link_FLAGS}")

SET(Boost_FOUND 0)
FIND_PACKAGE(Boost COMPONENTS thread)
IF(Boost_FOUND)
    MESSAGE(STATUS "Found Boost")
    MESSAGE(STATUS "Boost_INCLUDE_DIRS ${Boost_INCLUDE_DIRS}")
	INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
	IF(UNIX)
		LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
	ENDIF(UNIX)
ENDIF(Boost_FOUND)

#
#  Dependency on dg-middleware
#
# pkg_check_modules(DGMIDDLEWARE dg-middleware)
# 
# MESSAGE(STATUS "PKG_CONFIG_EXEC: ${PKG_CONFIG_EXECUTABLE}")
# EXEC_PROGRAM(${PKG_CONFIG_EXECUTABLE} ARGS dg-middleware --variable=datarootdir
#   OUTPUT_VARIABLE DGMIDDLEWARE_DATADIR)

#
# Dependency on bci-middle ware
#
pkg_check_modules(BCIMIDDLEWARE bci-middleware)

EXEC_PROGRAM(${PKG_CONFIG_EXECUTABLE} ARGS bci-middleware --cflags
  OUTPUT_VARIABLE BCIMIDDLEWARE_CFLAGS)
MESSAGE(STATUS "BCIMIDDLEWARE_CFLAGS: ${BCIMIDDLEWARE_CFLAGS}")
EXEC_PROGRAM(${PKG_CONFIG_EXECUTABLE} ARGS bci-middleware --libs
  OUTPUT_VARIABLE BCIMIDDLEWARE_LIBS)
MESSAGE(STATUS "BCIMIDDLEWARE_LIBS: ${BCIMIDDLEWARE_LIBS}")

#
# Dependency on coshell-bci 
#
# pkg_check_modules(BCIMIDDLEWARE coshell-bci)
# 
# EXEC_PROGRAM(${PKG_CONFIG_EXECUTABLE} ARGS coshell-bci --cflags
#   OUTPUT_VARIABLE COSHELLBCI_CFLAGS)
# MESSAGE(STATUS "COSHELLBCI_CFLAGS: ${COSHELLBCI_CFLAGS}")
# EXEC_PROGRAM(${PKG_CONFIG_EXECUTABLE} ARGS coshell-bci --libs
#   OUTPUT_VARIABLE COSHELLBCI_LIBS)
# MESSAGE(STATUS "COSHELLBCI_LIBS: ${COSHELLBCI_LIBS}")
# 
# IF(WIN32)
#   ADD_DEFINITIONS("-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS /wd4251 /wd4275 /wd4101 /wd4355")
# ENDIF(WIN32)

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(include)
ADD_SUBDIRECTORY(test)

